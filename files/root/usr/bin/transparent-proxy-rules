#!/bin/sh
#
# Copyright (C) 2014-2017 Jian Chang <aa65535@live.com>
# Copyright (C) 2017 Ian Li <OpenSource@ianli.xyz>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

usage() {
	cat <<-EOF
		Usage: transparent-proxy-rules [options]

		Valid options are:

				-l <local_port>         port number of local transparent proxy server
				-B <ip_list_file>       a file whose content is bypassed ip list
				-b <wan_ips>            wan ip of will be bypassed
				-W <ip_list_file>       a file whose content is forwarded ip list
				-w <wan_ips>            wan ip of will be forwarded
				-I <interface>          proxy only for the given interface
				-d <target>             the default target of lan access control
				-a <lan_hosts>          mac addr of access control, need a prefix to
                                define proxy type
				-e <extra_args>         extra arguments for iptables
				-o                      apply the rules to the OUTPUT chain
				-O                      apply the global rules to the OUTPUT chain
				-u                      enable udprelay mode, TPROXY is required
				-t                      enable global tproxy mode, TPROXY is required
				-f                      flush the rules
				-h                      show this help message and exit
EOF
	exit $1
}

loger() {
	# 1.alert 2.crit 3.err 4.warn 5.notice 6.info 7.debug
	logger -st transparent-proxy-rules[$$] -p$1 $2
}

flush_rules() {
	iptables-save -c | grep -v "TP_SPEC" | iptables-restore -c
	if command -v ip >/dev/null 2>&1; then
		ip rule del fwmark 1 lookup 100 2>/dev/null
		ip route del local default dev lo table 100 2>/dev/null
	fi
	for setname in $(ipset -n list | grep "tp_spec"); do
		ipset destroy $setname 2>/dev/null
	done
	FWI=$(uci get firewall.transparent_proxy.path 2>/dev/null)
	[ -n "$FWI" ] && echo '# firewall include file' >$FWI
	return 0
}

ipset_init() {
	ipset -! restore <<-EOF || return 1
		create tp_spec_src_ac hash:mac hashsize 64
		create tp_spec_src_bp hash:mac hashsize 64
		create tp_spec_src_fw hash:mac hashsize 64
		create tp_spec_dst_sp hash:net hashsize 64
		create tp_spec_dst_bp hash:net hashsize 64
		create tp_spec_dst_fw hash:net hashsize 64
		$(gen_lan_host_ipset_entry)
		$(gen_special_purpose_ip | sed -e "s/^/add tp_spec_dst_sp /")
		$(sed -e "s/^/add tp_spec_dst_bp /" ${WAN_BP_LIST:=/dev/null} 2>/dev/null)
		$(for ip in $WAN_BP_IP; do echo "add tp_spec_dst_bp $ip"; done)
		$(sed -e "s/^/add tp_spec_dst_fw /" ${WAN_FW_LIST:=/dev/null} 2>/dev/null)
		$(for ip in $WAN_FW_IP; do echo "add tp_spec_dst_fw $ip"; done)
EOF
	return 0
}

ipt_nat() {
	include_ac_rules nat
	ipt="iptables -t nat"
	$ipt -A TP_SPEC_WAN_FW -p tcp \
		-j REDIRECT --to-ports $LOCAL_PORT || return 1
	if [ -n "$OUTPUT" ]; then
		$ipt -N TP_SPEC_WAN_DG
		$ipt -A TP_SPEC_WAN_DG -m set --match-set tp_spec_dst_sp dst -j RETURN
		$ipt -A TP_SPEC_WAN_DG -p tcp $EXT_ARGS -j $OUTPUT
		$ipt -I OUTPUT 1 -p tcp -j TP_SPEC_WAN_DG
	fi
	return $?
}

ipt_mangle() {
	[ -n "$UDP_ENABLED" ] || return 0
	if !(lsmod | grep -q TPROXY && command -v ip >/dev/null); then
		loger 4 "TPROXY or ip not found."
		return 0
	fi
	ip rule add fwmark 1 lookup 100
	ip route add local default dev lo table 100
	include_ac_rules mangle
	iptables -t mangle -A TP_SPEC_WAN_FW -p udp \
		-j TPROXY --on-port $LOCAL_PORT --tproxy-mark 0x01/0x01
	return $?
}

# apply when global tproxy mode is enabled
ipt_tproxy() {
	[ -n "$TPROXY" ] || return 0
	if !(lsmod | grep -q TPROXY && command -v ip >/dev/null); then
		loger 4 "TPROXY or ip not found."
		return 0
	fi
	ip rule add fwmark 1 lookup 100
	ip route add local default dev lo table 100

	local ipt="iptables -t mangle"
	$ipt -N TP_SPEC_LAN_DG
	$ipt -N TP_SPEC_LAN_AC
	$ipt -N TP_SPEC_WAN_AC
	$ipt -N TP_SPEC_WAN_FW

	$ipt -A TP_SPEC_LAN_DG -m set --match-set tp_spec_dst_sp dst -j RETURN
	$ipt -A TP_SPEC_LAN_DG -p tcp $EXT_ARGS -j TP_SPEC_LAN_AC
	if [ -n "$UDP_ENABLED" ]; then
		$ipt -A TP_SPEC_LAN_DG -p udp $EXT_ARGS -j TP_SPEC_LAN_AC
	fi
	$ipt -A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_bp src -j RETURN
	$ipt -A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_fw src -j TP_SPEC_WAN_FW
	$ipt -A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_ac src -j TP_SPEC_WAN_AC
	$ipt -A TP_SPEC_LAN_AC -j ${LAN_TARGET:=TP_SPEC_WAN_AC}
	$ipt -A TP_SPEC_WAN_AC -m set --match-set tp_spec_dst_fw dst -j TP_SPEC_WAN_FW
	$ipt -A TP_SPEC_WAN_AC -m set --match-set tp_spec_dst_bp dst -j RETURN
	$ipt -A TP_SPEC_WAN_AC -j TP_SPEC_WAN_FW
	$ipt $(gen_prerouting_rules "tcp")
	if [ -n "$UDP_ENABLED" ]; then
		$ipt $(gen_prerouting_rules "udp")
	fi

	$ipt -A TP_SPEC_WAN_FW -p tcp \
		-j TPROXY --on-port $LOCAL_PORT --tproxy-mark 0x01/0x01
	if [ "$UDP_ENABLED" = 1 ]; then
		$ipt -A TP_SPEC_WAN_FW -p udp \
			-j TPROXY --on-port $LOCAL_PORT --tproxy-mark 0x01/0x01
	fi

	if [ -n "$OUTPUT" ]; then
		$ipt -N TP_SPEC_WAN_DG
		$ipt -A TP_SPEC_WAN_DG -m set --match-set tp_spec_dst_sp dst -j RETURN
		$ipt -A TP_SPEC_WAN_DG -m mark --mark 0x64 -j RETURN
		$ipt -A TP_SPEC_WAN_DG -m set --match-set tp_spec_dst_bp src -j RETURN
		$ipt -A TP_SPEC_WAN_DG -m set --match-set tp_spec_dst_bp dst -j RETURN
		$ipt -A TP_SPEC_WAN_DG -p tcp -j MARK --set-mark 1
		if [ "$UDP_ENABLED" = 1 ]; then
			$ipt -A TP_SPEC_WAN_DG -p udp -j MARK --set-mark 1
		fi
		$ipt -I OUTPUT 1 -j TP_SPEC_WAN_DG
	fi

	return $?
}

export_ipt_rules() {
	[ -n "$FWI" ] || return 0
	cat <<-CAT >>$FWI
	iptables-save -c | grep -v "TP_SPEC" | iptables-restore -c
	iptables-restore -n <<-EOF
	$(iptables-save | grep -E "TP_SPEC|^\*|^COMMIT" |\
			sed -e "s/^-A \(OUTPUT\|PREROUTING\)/-I \1 1/")
	EOF
CAT
	return $?
}

gen_lan_host_ipset_entry() {
	for host in $LAN_HOSTS; do
		case "${host:0:1}" in
			n|N)
				echo add tp_spec_src_ac ${host:2}
				;;
			b|B)
				echo add tp_spec_src_bp ${host:2}
				;;
			g|G)
				echo add tp_spec_src_fw ${host:2}
				;;
		esac
	done
}

gen_special_purpose_ip() {
	cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
		0.0.0.0/8
		10.0.0.0/8
		100.64.0.0/10
		127.0.0.0/8
		169.254.0.0/16
		172.16.0.0/12
		192.0.0.0/24
		192.0.2.0/24
		192.31.196.0/24
		192.52.193.0/24
		192.88.99.0/24
		192.168.0.0/16
		192.175.48.0/24
		198.18.0.0/15
		198.51.100.0/24
		203.0.113.0/24
		224.0.0.0/4
		240.0.0.0/4
		255.255.255.255
EOF
}

include_ac_rules() {
	local protocol=$([ "$1" = "mangle" ] && echo udp || echo tcp)
	iptables-restore -n <<-EOF
	*$1
	:TP_SPEC_LAN_DG - [0:0]
	:TP_SPEC_LAN_AC - [0:0]
	:TP_SPEC_WAN_AC - [0:0]
	:TP_SPEC_WAN_FW - [0:0]
	-A TP_SPEC_LAN_DG -m set --match-set tp_spec_dst_sp dst -j RETURN
	-A TP_SPEC_LAN_DG -p $protocol $EXT_ARGS -j TP_SPEC_LAN_AC
	-A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_bp src -j RETURN
	-A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_fw src -j TP_SPEC_WAN_FW
	-A TP_SPEC_LAN_AC -m set --match-set tp_spec_src_ac src -j TP_SPEC_WAN_AC
	-A TP_SPEC_LAN_AC -j ${LAN_TARGET:=TP_SPEC_WAN_AC}
	-A TP_SPEC_WAN_AC -m set --match-set tp_spec_dst_fw dst -j TP_SPEC_WAN_FW
	-A TP_SPEC_WAN_AC -m set --match-set tp_spec_dst_bp dst -j RETURN
	-A TP_SPEC_WAN_AC -j TP_SPEC_WAN_FW
	$(gen_prerouting_rules $protocol)
	COMMIT
EOF
}

gen_prerouting_rules() {
	[ -z "$IFNAMES" ] && echo -I PREROUTING 1 -p $1 -j TP_SPEC_LAN_DG
	for ifname in $IFNAMES; do
		echo -I PREROUTING 1 -i $ifname -p $1 -j TP_SPEC_LAN_DG
	done
}

apply_ipt_rules() {
	if [ -n "$TPROXY" ]; then
		ipt_tproxy
	else
		ipt_nat && ipt_mangle
	fi

	return $?
}

while getopts ":s:l:S:L:B:b:W:w:I:d:a:e:oOuUtfh" arg; do
	case "$arg" in
		l)
			LOCAL_PORT=$OPTARG
			;;
		B)
			WAN_BP_LIST=$OPTARG
			;;
		b)
			WAN_BP_IP=$OPTARG
			;;
		W)
			WAN_FW_LIST=$OPTARG
			;;
		w)
			WAN_FW_IP=$OPTARG
			;;
		I)
			IFNAMES=$OPTARG
			;;
		d)
			LAN_TARGET=$OPTARG
			;;
		a)
			LAN_HOSTS=$OPTARG
			;;
		e)
			EXT_ARGS=$OPTARG
			;;
		o)
			OUTPUT=TP_SPEC_WAN_AC
			;;
		O)
			OUTPUT=TP_SPEC_WAN_FW
			;;
		u)
			UDP_ENABLED=1
			;;
		t)
			TPROXY=1
			;;
		f)
			flush_rules
			exit 0
			;;
		h)
			usage 0
			;;
	esac
done

[ -z "$LOCAL_PORT" ] && usage 2

flush_rules && ipset_init && apply_ipt_rules && export_ipt_rules
RET=$?
[ "$RET" = 0 ] || loger 3 "Start failed!"
exit $RET
